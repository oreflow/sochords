/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.com.oreflow.schord.Chord', null, global);
goog.exportSymbol('proto.com.oreflow.schord.ChordInstruction', null, global);
goog.exportSymbol('proto.com.oreflow.schord.Instruction', null, global);
goog.exportSymbol('proto.com.oreflow.schord.InstructionSection', null, global);
goog.exportSymbol('proto.com.oreflow.schord.PickInstruction', null, global);
goog.exportSymbol('proto.com.oreflow.schord.SoChordSong', null, global);
goog.exportSymbol('proto.com.oreflow.schord.Song', null, global);
goog.exportSymbol('proto.com.oreflow.schord.SongSection', null, global);
goog.exportSymbol('proto.com.oreflow.schord.SongSection.Section', null, global);
goog.exportSymbol('proto.com.oreflow.schord.StringCombination', null, global);
goog.exportSymbol('proto.com.oreflow.schord.Strum', null, global);
goog.exportSymbol('proto.com.oreflow.schord.Tempo', null, global);
goog.exportSymbol('proto.com.oreflow.schord.Vocal', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.oreflow.schord.StringCombination = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.oreflow.schord.StringCombination, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.oreflow.schord.StringCombination.displayName = 'proto.com.oreflow.schord.StringCombination';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.oreflow.schord.StringCombination.prototype.toObject = function(opt_includeInstance) {
  return proto.com.oreflow.schord.StringCombination.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.oreflow.schord.StringCombination} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.oreflow.schord.StringCombination.toObject = function(includeInstance, msg) {
  var f, obj = {
    e4: jspb.Message.getFieldWithDefault(msg, 1, 0),
    b: jspb.Message.getFieldWithDefault(msg, 2, 0),
    g: jspb.Message.getFieldWithDefault(msg, 3, 0),
    d: jspb.Message.getFieldWithDefault(msg, 4, 0),
    a: jspb.Message.getFieldWithDefault(msg, 5, 0),
    e2: jspb.Message.getFieldWithDefault(msg, 6, 0),
    name: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.oreflow.schord.StringCombination}
 */
proto.com.oreflow.schord.StringCombination.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.oreflow.schord.StringCombination;
  return proto.com.oreflow.schord.StringCombination.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.oreflow.schord.StringCombination} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.oreflow.schord.StringCombination}
 */
proto.com.oreflow.schord.StringCombination.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setE4(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setB(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setG(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setD(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setA(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setE2(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.oreflow.schord.StringCombination.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.oreflow.schord.StringCombination.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.oreflow.schord.StringCombination} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.oreflow.schord.StringCombination.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getE4();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getB();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getG();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getD();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getA();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getE2();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional int32 e4 = 1;
 * @return {number}
 */
proto.com.oreflow.schord.StringCombination.prototype.getE4 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.com.oreflow.schord.StringCombination.prototype.setE4 = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 b = 2;
 * @return {number}
 */
proto.com.oreflow.schord.StringCombination.prototype.getB = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.com.oreflow.schord.StringCombination.prototype.setB = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 g = 3;
 * @return {number}
 */
proto.com.oreflow.schord.StringCombination.prototype.getG = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.com.oreflow.schord.StringCombination.prototype.setG = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 d = 4;
 * @return {number}
 */
proto.com.oreflow.schord.StringCombination.prototype.getD = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.com.oreflow.schord.StringCombination.prototype.setD = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 a = 5;
 * @return {number}
 */
proto.com.oreflow.schord.StringCombination.prototype.getA = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.com.oreflow.schord.StringCombination.prototype.setA = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 e2 = 6;
 * @return {number}
 */
proto.com.oreflow.schord.StringCombination.prototype.getE2 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.com.oreflow.schord.StringCombination.prototype.setE2 = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional string name = 7;
 * @return {string}
 */
proto.com.oreflow.schord.StringCombination.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.com.oreflow.schord.StringCombination.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.oreflow.schord.PickInstruction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.com.oreflow.schord.PickInstruction.repeatedFields_, null);
};
goog.inherits(proto.com.oreflow.schord.PickInstruction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.oreflow.schord.PickInstruction.displayName = 'proto.com.oreflow.schord.PickInstruction';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.com.oreflow.schord.PickInstruction.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.oreflow.schord.PickInstruction.prototype.toObject = function(opt_includeInstance) {
  return proto.com.oreflow.schord.PickInstruction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.oreflow.schord.PickInstruction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.oreflow.schord.PickInstruction.toObject = function(includeInstance, msg) {
  var f, obj = {
    tempo: jspb.Message.getFieldWithDefault(msg, 1, 0),
    picksList: jspb.Message.toObjectList(msg.getPicksList(),
    proto.com.oreflow.schord.StringCombination.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.oreflow.schord.PickInstruction}
 */
proto.com.oreflow.schord.PickInstruction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.oreflow.schord.PickInstruction;
  return proto.com.oreflow.schord.PickInstruction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.oreflow.schord.PickInstruction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.oreflow.schord.PickInstruction}
 */
proto.com.oreflow.schord.PickInstruction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.com.oreflow.schord.Tempo} */ (reader.readEnum());
      msg.setTempo(value);
      break;
    case 2:
      var value = new proto.com.oreflow.schord.StringCombination;
      reader.readMessage(value,proto.com.oreflow.schord.StringCombination.deserializeBinaryFromReader);
      msg.addPicks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.oreflow.schord.PickInstruction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.oreflow.schord.PickInstruction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.oreflow.schord.PickInstruction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.oreflow.schord.PickInstruction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTempo();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getPicksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.com.oreflow.schord.StringCombination.serializeBinaryToWriter
    );
  }
};


/**
 * optional Tempo tempo = 1;
 * @return {!proto.com.oreflow.schord.Tempo}
 */
proto.com.oreflow.schord.PickInstruction.prototype.getTempo = function() {
  return /** @type {!proto.com.oreflow.schord.Tempo} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.com.oreflow.schord.Tempo} value */
proto.com.oreflow.schord.PickInstruction.prototype.setTempo = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * repeated StringCombination picks = 2;
 * @return {!Array<!proto.com.oreflow.schord.StringCombination>}
 */
proto.com.oreflow.schord.PickInstruction.prototype.getPicksList = function() {
  return /** @type{!Array<!proto.com.oreflow.schord.StringCombination>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.com.oreflow.schord.StringCombination, 2));
};


/** @param {!Array<!proto.com.oreflow.schord.StringCombination>} value */
proto.com.oreflow.schord.PickInstruction.prototype.setPicksList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.com.oreflow.schord.StringCombination=} opt_value
 * @param {number=} opt_index
 * @return {!proto.com.oreflow.schord.StringCombination}
 */
proto.com.oreflow.schord.PickInstruction.prototype.addPicks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.com.oreflow.schord.StringCombination, opt_index);
};


proto.com.oreflow.schord.PickInstruction.prototype.clearPicksList = function() {
  this.setPicksList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.oreflow.schord.Chord = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.com.oreflow.schord.Chord.repeatedFields_, null);
};
goog.inherits(proto.com.oreflow.schord.Chord, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.oreflow.schord.Chord.displayName = 'proto.com.oreflow.schord.Chord';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.com.oreflow.schord.Chord.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.oreflow.schord.Chord.prototype.toObject = function(opt_includeInstance) {
  return proto.com.oreflow.schord.Chord.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.oreflow.schord.Chord} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.oreflow.schord.Chord.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    strummingPatternList: jspb.Message.getRepeatedField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.oreflow.schord.Chord}
 */
proto.com.oreflow.schord.Chord.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.oreflow.schord.Chord;
  return proto.com.oreflow.schord.Chord.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.oreflow.schord.Chord} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.oreflow.schord.Chord}
 */
proto.com.oreflow.schord.Chord.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {!Array<!proto.com.oreflow.schord.Strum>} */ (reader.readPackedEnum());
      msg.setStrummingPatternList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.oreflow.schord.Chord.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.oreflow.schord.Chord.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.oreflow.schord.Chord} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.oreflow.schord.Chord.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStrummingPatternList();
  if (f.length > 0) {
    writer.writePackedEnum(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.com.oreflow.schord.Chord.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.com.oreflow.schord.Chord.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated Strum strumming_pattern = 2;
 * @return {!Array<!proto.com.oreflow.schord.Strum>}
 */
proto.com.oreflow.schord.Chord.prototype.getStrummingPatternList = function() {
  return /** @type {!Array<!proto.com.oreflow.schord.Strum>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array<!proto.com.oreflow.schord.Strum>} value */
proto.com.oreflow.schord.Chord.prototype.setStrummingPatternList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!proto.com.oreflow.schord.Strum} value
 * @param {number=} opt_index
 */
proto.com.oreflow.schord.Chord.prototype.addStrummingPattern = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.com.oreflow.schord.Chord.prototype.clearStrummingPatternList = function() {
  this.setStrummingPatternList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.oreflow.schord.ChordInstruction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.com.oreflow.schord.ChordInstruction.repeatedFields_, null);
};
goog.inherits(proto.com.oreflow.schord.ChordInstruction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.oreflow.schord.ChordInstruction.displayName = 'proto.com.oreflow.schord.ChordInstruction';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.com.oreflow.schord.ChordInstruction.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.oreflow.schord.ChordInstruction.prototype.toObject = function(opt_includeInstance) {
  return proto.com.oreflow.schord.ChordInstruction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.oreflow.schord.ChordInstruction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.oreflow.schord.ChordInstruction.toObject = function(includeInstance, msg) {
  var f, obj = {
    chordsList: jspb.Message.toObjectList(msg.getChordsList(),
    proto.com.oreflow.schord.Chord.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.oreflow.schord.ChordInstruction}
 */
proto.com.oreflow.schord.ChordInstruction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.oreflow.schord.ChordInstruction;
  return proto.com.oreflow.schord.ChordInstruction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.oreflow.schord.ChordInstruction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.oreflow.schord.ChordInstruction}
 */
proto.com.oreflow.schord.ChordInstruction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.com.oreflow.schord.Chord;
      reader.readMessage(value,proto.com.oreflow.schord.Chord.deserializeBinaryFromReader);
      msg.addChords(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.oreflow.schord.ChordInstruction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.oreflow.schord.ChordInstruction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.oreflow.schord.ChordInstruction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.oreflow.schord.ChordInstruction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChordsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.com.oreflow.schord.Chord.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Chord chords = 1;
 * @return {!Array<!proto.com.oreflow.schord.Chord>}
 */
proto.com.oreflow.schord.ChordInstruction.prototype.getChordsList = function() {
  return /** @type{!Array<!proto.com.oreflow.schord.Chord>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.com.oreflow.schord.Chord, 1));
};


/** @param {!Array<!proto.com.oreflow.schord.Chord>} value */
proto.com.oreflow.schord.ChordInstruction.prototype.setChordsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.com.oreflow.schord.Chord=} opt_value
 * @param {number=} opt_index
 * @return {!proto.com.oreflow.schord.Chord}
 */
proto.com.oreflow.schord.ChordInstruction.prototype.addChords = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.com.oreflow.schord.Chord, opt_index);
};


proto.com.oreflow.schord.ChordInstruction.prototype.clearChordsList = function() {
  this.setChordsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.oreflow.schord.InstructionSection = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.com.oreflow.schord.InstructionSection.oneofGroups_);
};
goog.inherits(proto.com.oreflow.schord.InstructionSection, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.oreflow.schord.InstructionSection.displayName = 'proto.com.oreflow.schord.InstructionSection';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.com.oreflow.schord.InstructionSection.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.com.oreflow.schord.InstructionSection.InstructionCase = {
  INSTRUCTION_NOT_SET: 0,
  PICK_INSTRUCTION: 1,
  CHORD_INSTRUCTION: 2
};

/**
 * @return {proto.com.oreflow.schord.InstructionSection.InstructionCase}
 */
proto.com.oreflow.schord.InstructionSection.prototype.getInstructionCase = function() {
  return /** @type {proto.com.oreflow.schord.InstructionSection.InstructionCase} */(jspb.Message.computeOneofCase(this, proto.com.oreflow.schord.InstructionSection.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.oreflow.schord.InstructionSection.prototype.toObject = function(opt_includeInstance) {
  return proto.com.oreflow.schord.InstructionSection.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.oreflow.schord.InstructionSection} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.oreflow.schord.InstructionSection.toObject = function(includeInstance, msg) {
  var f, obj = {
    pickInstruction: (f = msg.getPickInstruction()) && proto.com.oreflow.schord.PickInstruction.toObject(includeInstance, f),
    chordInstruction: (f = msg.getChordInstruction()) && proto.com.oreflow.schord.ChordInstruction.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.oreflow.schord.InstructionSection}
 */
proto.com.oreflow.schord.InstructionSection.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.oreflow.schord.InstructionSection;
  return proto.com.oreflow.schord.InstructionSection.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.oreflow.schord.InstructionSection} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.oreflow.schord.InstructionSection}
 */
proto.com.oreflow.schord.InstructionSection.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.com.oreflow.schord.PickInstruction;
      reader.readMessage(value,proto.com.oreflow.schord.PickInstruction.deserializeBinaryFromReader);
      msg.setPickInstruction(value);
      break;
    case 2:
      var value = new proto.com.oreflow.schord.ChordInstruction;
      reader.readMessage(value,proto.com.oreflow.schord.ChordInstruction.deserializeBinaryFromReader);
      msg.setChordInstruction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.oreflow.schord.InstructionSection.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.oreflow.schord.InstructionSection.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.oreflow.schord.InstructionSection} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.oreflow.schord.InstructionSection.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPickInstruction();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.com.oreflow.schord.PickInstruction.serializeBinaryToWriter
    );
  }
  f = message.getChordInstruction();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.com.oreflow.schord.ChordInstruction.serializeBinaryToWriter
    );
  }
};


/**
 * optional PickInstruction pick_instruction = 1;
 * @return {?proto.com.oreflow.schord.PickInstruction}
 */
proto.com.oreflow.schord.InstructionSection.prototype.getPickInstruction = function() {
  return /** @type{?proto.com.oreflow.schord.PickInstruction} */ (
    jspb.Message.getWrapperField(this, proto.com.oreflow.schord.PickInstruction, 1));
};


/** @param {?proto.com.oreflow.schord.PickInstruction|undefined} value */
proto.com.oreflow.schord.InstructionSection.prototype.setPickInstruction = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.com.oreflow.schord.InstructionSection.oneofGroups_[0], value);
};


proto.com.oreflow.schord.InstructionSection.prototype.clearPickInstruction = function() {
  this.setPickInstruction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.oreflow.schord.InstructionSection.prototype.hasPickInstruction = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ChordInstruction chord_instruction = 2;
 * @return {?proto.com.oreflow.schord.ChordInstruction}
 */
proto.com.oreflow.schord.InstructionSection.prototype.getChordInstruction = function() {
  return /** @type{?proto.com.oreflow.schord.ChordInstruction} */ (
    jspb.Message.getWrapperField(this, proto.com.oreflow.schord.ChordInstruction, 2));
};


/** @param {?proto.com.oreflow.schord.ChordInstruction|undefined} value */
proto.com.oreflow.schord.InstructionSection.prototype.setChordInstruction = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.com.oreflow.schord.InstructionSection.oneofGroups_[0], value);
};


proto.com.oreflow.schord.InstructionSection.prototype.clearChordInstruction = function() {
  this.setChordInstruction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.oreflow.schord.InstructionSection.prototype.hasChordInstruction = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.oreflow.schord.Instruction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.com.oreflow.schord.Instruction.repeatedFields_, null);
};
goog.inherits(proto.com.oreflow.schord.Instruction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.oreflow.schord.Instruction.displayName = 'proto.com.oreflow.schord.Instruction';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.com.oreflow.schord.Instruction.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.oreflow.schord.Instruction.prototype.toObject = function(opt_includeInstance) {
  return proto.com.oreflow.schord.Instruction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.oreflow.schord.Instruction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.oreflow.schord.Instruction.toObject = function(includeInstance, msg) {
  var f, obj = {
    sectionsList: jspb.Message.toObjectList(msg.getSectionsList(),
    proto.com.oreflow.schord.InstructionSection.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.oreflow.schord.Instruction}
 */
proto.com.oreflow.schord.Instruction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.oreflow.schord.Instruction;
  return proto.com.oreflow.schord.Instruction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.oreflow.schord.Instruction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.oreflow.schord.Instruction}
 */
proto.com.oreflow.schord.Instruction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.com.oreflow.schord.InstructionSection;
      reader.readMessage(value,proto.com.oreflow.schord.InstructionSection.deserializeBinaryFromReader);
      msg.addSections(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.oreflow.schord.Instruction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.oreflow.schord.Instruction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.oreflow.schord.Instruction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.oreflow.schord.Instruction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSectionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.com.oreflow.schord.InstructionSection.serializeBinaryToWriter
    );
  }
};


/**
 * repeated InstructionSection sections = 1;
 * @return {!Array<!proto.com.oreflow.schord.InstructionSection>}
 */
proto.com.oreflow.schord.Instruction.prototype.getSectionsList = function() {
  return /** @type{!Array<!proto.com.oreflow.schord.InstructionSection>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.com.oreflow.schord.InstructionSection, 1));
};


/** @param {!Array<!proto.com.oreflow.schord.InstructionSection>} value */
proto.com.oreflow.schord.Instruction.prototype.setSectionsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.com.oreflow.schord.InstructionSection=} opt_value
 * @param {number=} opt_index
 * @return {!proto.com.oreflow.schord.InstructionSection}
 */
proto.com.oreflow.schord.Instruction.prototype.addSections = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.com.oreflow.schord.InstructionSection, opt_index);
};


proto.com.oreflow.schord.Instruction.prototype.clearSectionsList = function() {
  this.setSectionsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.oreflow.schord.Vocal = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.com.oreflow.schord.Vocal.repeatedFields_, null);
};
goog.inherits(proto.com.oreflow.schord.Vocal, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.oreflow.schord.Vocal.displayName = 'proto.com.oreflow.schord.Vocal';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.com.oreflow.schord.Vocal.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.oreflow.schord.Vocal.prototype.toObject = function(opt_includeInstance) {
  return proto.com.oreflow.schord.Vocal.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.oreflow.schord.Vocal} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.oreflow.schord.Vocal.toObject = function(includeInstance, msg) {
  var f, obj = {
    linesList: jspb.Message.getRepeatedField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.oreflow.schord.Vocal}
 */
proto.com.oreflow.schord.Vocal.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.oreflow.schord.Vocal;
  return proto.com.oreflow.schord.Vocal.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.oreflow.schord.Vocal} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.oreflow.schord.Vocal}
 */
proto.com.oreflow.schord.Vocal.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addLines(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.oreflow.schord.Vocal.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.oreflow.schord.Vocal.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.oreflow.schord.Vocal} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.oreflow.schord.Vocal.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLinesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string lines = 1;
 * @return {!Array<string>}
 */
proto.com.oreflow.schord.Vocal.prototype.getLinesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<string>} value */
proto.com.oreflow.schord.Vocal.prototype.setLinesList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.com.oreflow.schord.Vocal.prototype.addLines = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.com.oreflow.schord.Vocal.prototype.clearLinesList = function() {
  this.setLinesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.oreflow.schord.SongSection = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.oreflow.schord.SongSection, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.oreflow.schord.SongSection.displayName = 'proto.com.oreflow.schord.SongSection';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.oreflow.schord.SongSection.prototype.toObject = function(opt_includeInstance) {
  return proto.com.oreflow.schord.SongSection.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.oreflow.schord.SongSection} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.oreflow.schord.SongSection.toObject = function(includeInstance, msg) {
  var f, obj = {
    section: jspb.Message.getFieldWithDefault(msg, 1, 0),
    number: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.oreflow.schord.SongSection}
 */
proto.com.oreflow.schord.SongSection.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.oreflow.schord.SongSection;
  return proto.com.oreflow.schord.SongSection.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.oreflow.schord.SongSection} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.oreflow.schord.SongSection}
 */
proto.com.oreflow.schord.SongSection.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.com.oreflow.schord.SongSection.Section} */ (reader.readEnum());
      msg.setSection(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.oreflow.schord.SongSection.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.oreflow.schord.SongSection.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.oreflow.schord.SongSection} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.oreflow.schord.SongSection.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSection();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getNumber();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.com.oreflow.schord.SongSection.Section = {
  UNKNOWN_SECTION: 0,
  INTRO: 1,
  VERSE: 2,
  PRE_CHORUS: 3,
  CHORUS: 4,
  BRIDGE: 5,
  OUTRO: 6,
  POST_CHORUS: 7,
  SOLO: 8,
  BREAK: 9
};

/**
 * optional Section section = 1;
 * @return {!proto.com.oreflow.schord.SongSection.Section}
 */
proto.com.oreflow.schord.SongSection.prototype.getSection = function() {
  return /** @type {!proto.com.oreflow.schord.SongSection.Section} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.com.oreflow.schord.SongSection.Section} value */
proto.com.oreflow.schord.SongSection.prototype.setSection = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional int32 number = 2;
 * @return {number}
 */
proto.com.oreflow.schord.SongSection.prototype.getNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.com.oreflow.schord.SongSection.prototype.setNumber = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.oreflow.schord.Song = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.com.oreflow.schord.Song.repeatedFields_, null);
};
goog.inherits(proto.com.oreflow.schord.Song, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.oreflow.schord.Song.displayName = 'proto.com.oreflow.schord.Song';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.com.oreflow.schord.Song.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.oreflow.schord.Song.prototype.toObject = function(opt_includeInstance) {
  return proto.com.oreflow.schord.Song.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.oreflow.schord.Song} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.oreflow.schord.Song.toObject = function(includeInstance, msg) {
  var f, obj = {
    sectionsList: jspb.Message.toObjectList(msg.getSectionsList(),
    proto.com.oreflow.schord.SongSection.toObject, includeInstance),
    instructionsMap: (f = msg.getInstructionsMap()) ? f.toObject(includeInstance, proto.com.oreflow.schord.Instruction.toObject) : [],
    vocalsMap: (f = msg.getVocalsMap()) ? f.toObject(includeInstance, proto.com.oreflow.schord.Vocal.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.oreflow.schord.Song}
 */
proto.com.oreflow.schord.Song.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.oreflow.schord.Song;
  return proto.com.oreflow.schord.Song.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.oreflow.schord.Song} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.oreflow.schord.Song}
 */
proto.com.oreflow.schord.Song.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.com.oreflow.schord.SongSection;
      reader.readMessage(value,proto.com.oreflow.schord.SongSection.deserializeBinaryFromReader);
      msg.addSections(value);
      break;
    case 2:
      var value = msg.getInstructionsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.com.oreflow.schord.Instruction.deserializeBinaryFromReader, "");
         });
      break;
    case 3:
      var value = msg.getVocalsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.com.oreflow.schord.Vocal.deserializeBinaryFromReader, "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.oreflow.schord.Song.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.oreflow.schord.Song.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.oreflow.schord.Song} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.oreflow.schord.Song.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSectionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.com.oreflow.schord.SongSection.serializeBinaryToWriter
    );
  }
  f = message.getInstructionsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.com.oreflow.schord.Instruction.serializeBinaryToWriter);
  }
  f = message.getVocalsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.com.oreflow.schord.Vocal.serializeBinaryToWriter);
  }
};


/**
 * repeated SongSection sections = 1;
 * @return {!Array<!proto.com.oreflow.schord.SongSection>}
 */
proto.com.oreflow.schord.Song.prototype.getSectionsList = function() {
  return /** @type{!Array<!proto.com.oreflow.schord.SongSection>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.com.oreflow.schord.SongSection, 1));
};


/** @param {!Array<!proto.com.oreflow.schord.SongSection>} value */
proto.com.oreflow.schord.Song.prototype.setSectionsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.com.oreflow.schord.SongSection=} opt_value
 * @param {number=} opt_index
 * @return {!proto.com.oreflow.schord.SongSection}
 */
proto.com.oreflow.schord.Song.prototype.addSections = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.com.oreflow.schord.SongSection, opt_index);
};


proto.com.oreflow.schord.Song.prototype.clearSectionsList = function() {
  this.setSectionsList([]);
};


/**
 * map<string, Instruction> instructions = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.com.oreflow.schord.Instruction>}
 */
proto.com.oreflow.schord.Song.prototype.getInstructionsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.com.oreflow.schord.Instruction>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      proto.com.oreflow.schord.Instruction));
};


proto.com.oreflow.schord.Song.prototype.clearInstructionsMap = function() {
  this.getInstructionsMap().clear();
};


/**
 * map<string, Vocal> vocals = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.com.oreflow.schord.Vocal>}
 */
proto.com.oreflow.schord.Song.prototype.getVocalsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.com.oreflow.schord.Vocal>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      proto.com.oreflow.schord.Vocal));
};


proto.com.oreflow.schord.Song.prototype.clearVocalsMap = function() {
  this.getVocalsMap().clear();
};


/**
 * @enum {number}
 */
proto.com.oreflow.schord.SoChordSong = {
  UNKNOWN: 0,
  SHALLOW: 1,
  GOOD_RIDDANCE: 2
};

/**
 * @enum {number}
 */
proto.com.oreflow.schord.Tempo = {
  UNKNOWN_TEMPO: 0,
  EIGHT: 1
};

/**
 * @enum {number}
 */
proto.com.oreflow.schord.Strum = {
  NONE: 0,
  UP: 1,
  DOWN: 2
};

goog.object.extend(exports, proto.com.oreflow.schord);
